{"version":3,"sources":["Components/Header.js","Components/Content.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","style","backgroundColor","boxShadow","padding","color","fontWeight","Content","useState","showTitle","setShowTitle","notesArray","setNotesArray","title","description","note","setNote","addNotes","e","name","target","val","value","prevalue","onChange","height","placeholder","aria-label","onClick","map","index","id","wordBreak","list","filter","item","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kOAeeA,G,KAZD,WACd,OACI,oCACI,yBAAKC,UAAU,QACX,yBAAKA,UAAU,mBAAmBC,MAAO,CAACC,gBAAgB,UAAUC,UAAW,sCAC3E,wBAAKF,MAAO,CAACG,QAAQ,YAAYC,MAAM,QAAQC,WAAW,SAA1D,oB,+DCuHDC,EA1HC,WAAO,IAAD,EACcC,oBAAS,GADvB,mBACbC,EADa,KACFC,EADE,OAEgBF,mBAAS,IAFzB,mBAEbG,EAFa,KAEDC,EAFC,OAGIJ,mBAAS,CAC/BK,MAAO,GACPC,YAAa,KALK,mBAGbC,EAHa,KAGPC,EAHO,KAYdC,EAAW,SAACC,GAChB,IAAIC,EAAOD,EAAEE,OAAOD,KAChBE,EAAMH,EAAEE,OAAOE,MACnBN,GAAQ,SAACO,GACP,OAAO,2BACFA,GADL,kBAEGJ,EAAOE,QAwBd,OACE,oCACE,yBAAKrB,UAAU,0EACb,yBAAKA,UAAU,WACE,IAAdS,EACC,8BACET,UAAU,qBACVwB,SAAUP,EACVK,MAAOP,EAAKF,MACZM,KAAK,QACLlB,MAAO,CACLwB,OAAQ,OACRtB,UAAW,qCAEbuB,YAAY,UACZC,aAAW,kBAEX,MAEN,yBAAK3B,UAAU,SACb,8BACEA,UAAU,qBACVwB,SAAUP,EACVK,MAAOP,EAAKD,YACZK,KAAK,cACLS,QA3DG,WACXlB,GAAa,IA2DLT,MAAO,CACLwB,OAAQ,OACRtB,UAAW,qCAEbuB,YAAY,sBACZC,aAAW,oBAGA,IAAdlB,EACC,yBAAKT,UAAU,qCACb,4BAAQA,UAAU,kBAAkB4B,QAvD/B,WACbhB,EAAc,GAAD,mBAAKD,GAAL,CAAiBI,KAC9BC,GAAQ,SAACO,GACP,OAAO,2BACFA,GADL,IAEEV,MAAO,GACPC,YAAa,UAkDP,kBAAC,IAAD,QAGF,MAEN,yBAAKd,UAAU,aACb,yBAAKA,UAAU,iBACb,yBAAKA,UAAU,2CACZW,EAAWkB,KAAI,SAACR,EAAKS,GACpB,OACE,oCACE,yBACEC,GAAID,EACJ9B,UAAU,4BACVC,MAAO,CACLE,UAAW,oCAAoC6B,UAAU,cAG3D,4BAAKX,EAAIR,MAAT,KACA,2BAAIQ,EAAIP,aACR,yBAAKd,UAAU,OACb,yBAAKA,UAAU,yCACb,4BACEA,UAAU,aACV4B,QAAS,WArElB,IAACG,IAsEiBD,EArE/BlB,GAAc,SAACqB,GACb,OAAOA,EAAKC,QAAO,SAACC,EAAKL,GACvB,OAAOA,IAAUC,UAsEC,kBAAC,IAAD,mB,MC9FXK,MAZf,WACE,OACC,oCACG,yBAAKpC,UAAU,UACjB,kBAAC,EAAD,MACA,kBAAC,EAAD,SCCgBqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7166f446.chunk.js","sourcesContent":["import React from \"react\"\r\nimport \"../../node_modules/bootstrap/dist/css/bootstrap.min.css\"\r\n\r\nconst Header =()=>{\r\nreturn(\r\n    <>\r\n        <div className=\"row \">\r\n            <div className=\"col-12 first_row\" style={{backgroundColor:\"#ffc107\",boxShadow: '-1px 1px 5px 0px rgba(0,0,0,0.75)'}}>\r\n                <h2  style={{padding:'10px 20px',color:\"white\",fontWeight:\"bold\"}}>Google-Keep</h2>\r\n            </div>\r\n        </div>\r\n    </>\r\n)\r\n};\r\n\r\nexport default Header","import React, { useState } from \"react\";\r\nimport \"../../node_modules/bootstrap/dist/css/bootstrap.min.css\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\n\r\nconst Content = () => {\r\n  const [showTitle, setShowTitle] = useState(false);\r\n  const [notesArray, setNotesArray] = useState([]);\r\n  const [note, setNote] = useState({\r\n    title: \"\",\r\n    description: \"\",\r\n  });\r\n\r\n  const show = () => {\r\n    setShowTitle(true);\r\n  };\r\n\r\n  const addNotes = (e) => {\r\n    let name = e.target.name;\r\n    let val = e.target.value;\r\n    setNote((prevalue) => {\r\n      return {\r\n        ...prevalue,\r\n        [name]: val,\r\n      };\r\n    });\r\n  };\r\n\r\n  const submit = () => {\r\n    setNotesArray([...notesArray, note]);\r\n    setNote((prevalue) => {\r\n      return {\r\n        ...prevalue,\r\n        title: \"\",\r\n        description: \"\",\r\n      };\r\n    });\r\n  };\r\n\r\n  const filter = (id) => {\r\n    setNotesArray((list) => {\r\n      return list.filter((item,index) => {\r\n        return index !== id;\r\n      });\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"row d-flex justify-content-center mt-3  flex-column align-items-center\">\r\n        <div className=\"col-3 \">\r\n          {showTitle === true ? (\r\n            <textarea\r\n              className=\"form-control mt-2 \"\r\n              onChange={addNotes}\r\n              value={note.title}\r\n              name=\"title\"\r\n              style={{\r\n                height: \"10px\",\r\n                boxShadow: \"-1px 1px 5px 0px rgba(0,0,0,0.75)\",\r\n              }}\r\n              placeholder=\"Title: \"\r\n              aria-label=\"With textarea\"\r\n            />\r\n          ) : null}\r\n        </div>\r\n        <div className=\"col-3\">\r\n          <textarea\r\n            className=\"form-control mt-2 \"\r\n            onChange={addNotes}\r\n            value={note.description}\r\n            name=\"description\"\r\n            onClick={show}\r\n            style={{\r\n              height: \"80px\",\r\n              boxShadow: \"-1px 1px 5px 0px rgba(0,0,0,0.75)\",\r\n            }}\r\n            placeholder=\"Write a note here..\"\r\n            aria-label=\"With textarea\"\r\n          />\r\n        </div>\r\n        {showTitle === true ? (\r\n          <div className=\"col-3  d-flex justify-content-end\">\r\n            <button className=\"btn mt-2 button\" onClick={submit}>\r\n              <AddIcon />\r\n            </button>\r\n          </div>\r\n        ) : null}\r\n      </div>\r\n      <div className=\"row mt-5 \">\r\n        <div className=\"col-12 d-flex\">\r\n          <div className=\"row d-flex justify-content-space-around\">\r\n            {notesArray.map((val, index) => {\r\n              return (\r\n                <>\r\n                  <div\r\n                    id={index}\r\n                    className=\"col-2 pl-3 ml-4 mb-3 btn2\"\r\n                    style={{\r\n                      boxShadow: \"-1px 1px 5px 0px rgba(0,0,0,0.75)\",wordBreak:\"break-all\"\r\n                    }}\r\n                  >\r\n                    <h4>{val.title} </h4>\r\n                    <p>{val.description}</p>\r\n                    <div className=\"row\">\r\n                      <div className=\"col-12 p-0 d-flex justify-content-end\">\r\n                        <button\r\n                          className=\"btn delete\"\r\n                          onClick={() => {\r\n                            filter(index);\r\n                          }}\r\n                        >\r\n                          <DeleteIcon />\r\n                        </button>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </>\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Content;\r\n","import React from 'react';\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\"\nimport Header from \"./Components/Header\"\nimport Content from \"./Components/Content\"\nimport './App.css';\n\nfunction App() {\n  return (\n   <>\n      <div className=\"fluid \" >\n    <Header/>\n    <Content/>\n    </div>\n   \n   </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}